export namespace RE {
    export { groupByWithCalc };
    export { innerRightJoinWith };
    export { unionWithHashKeys };
    export { updateWithHashKeys };
    export { between };
    export { matchByPropId };
    export { splitCond };
    export { filterMap };
    export { mapWithNext };
    export { mapWithPrevious };
    export { partialAtPos };
    export { pipeWithChain };
    export { pipe };
    export { pipeWhile };
    export { REparallel as parallel };
    export { runFunctionsInParallel };
    export { runFunctionsSyncOrParallel };
    export { pickPaths };
    export { mergeArrayOfObjectsRenamingProps };
    export { RLog };
    export { findSolution };
    export { something };
    export { uncurry };
}
export const groupByWithCalc: any;
export const innerRightJoinWith: any;
export const unionWithHashKeys: any;
export const updateWithHashKeys: any;
export const between: any;
export const matchByPropId: any;
export const splitCond: any;
export const filterMap: any;
export const mapWithNext: any;
export const mapWithPrevious: any;
export function pipeWithChain(...func: any[]): (...params: any[]) => any;
export function pipe(...func: any[]): (...params: any[]) => any;
export function pipeWhile(funCond: any, ini: any): (...funcs: any[]) => (...inputs: any[]) => any;
import { parallel } from "fluture";
export function runFunctionsInParallel(numberOfThreads?: number): (functionsToRunInParallel: any) => (data: any) => import("fluture").FutureInstance<any, any[]>;
export function runFunctionsSyncOrParallel(numberOfThreads?: number): (functionsToRun: any) => (data: any) => any;
export function RLog(prefix: any): (...obj: any[]) => any;
export function findSolution(solutionToFind: any, solutions: any): any;
export function something(lib: any): (...args: any[]) => any;
export const pickPaths: any;
export const mergeArrayOfObjectsRenamingProps: any;
export function uncurry(withLog?: boolean): (funcParam: any) => (...args: any[]) => any;
export function partialAtPos(fun: any, pos: any): (...paramValues: any[]) => any;
declare function REparallel(numberOfthreads?: number): (futuresOrValues: any) => import("fluture").FutureInstance<any, any[]>;
export { R, parallel };
//# sourceMappingURL=ramdaExt.d.ts.map